# ci is a way where we develop our software such that it is always in a deployment state
name: Build CI Pipeline

on:
  push:
    branches:
      - main  # Ensure this matches the branch you want to trigger on

jobs:
  project-testing: # Name of the job or that could be any
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies # This step caches pip dependencies between workflow runs to speed up installation by storing packages in ~/.cache/pip and restoring them based on the hash of requirements.txt
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install necessary dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Download NLTK data # that occur error 
        run: |
          python -m nltk.downloader wordnet

      - name: Run DVC pipeline
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          dvc repro
      
      # - name: Run model testing stages # that code just test our model
      #   env:
      #     DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      #   run: |
      #     python -m unittest model_testing/test_model_details.py
      
      - name: Run Flask app 
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: python flask_app/app.py
      
      # - name: Download MLflow Artifacts
      #   env:
      #     DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      #   run: |
      #     python download_artifacts.py