# ci is a way where we develop our software such that it is always in a deployment state
name: Build CI Pipeline

on:
  push:
    branches:
      - main  # Ensure this matches the branch you want to trigger on

jobs:
  project-testing: # Name of the job or that could be any
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies # This step caches pip dependencies between workflow runs to speed up installation by storing packages in ~/.cache/pip and restoring them based on the hash of requirements.txt dagshub token 77eb2325e588197f499b992a77be41a6bc3f4abf
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('dev_requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install necessary project development dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev_requirements.txt
      
      - name: Download NLTK data # that occur error 
        run: |
          python -m nltk.downloader wordnet

      # - name: Run DVC pipeline
      #   env:
      #     DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      #   run: |
      #     dvc repro
    
      
      # - name: Run model testing stages # that code just test our model
      #   env:
      #     DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      #   run: |
      #     python -m unittest model_testing/test_model_details.py
      
      # - name: promote model to production
      #   if: success() # that check if just previous command condition run sucessfully then run this command 
      #   env:
      #     DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      #   run: python src/models/promote_model.py

      # - name: Testing Flask app
      #   if: success()  
      #   env:
      #     DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      #   run: python -m unittest model_testing/test_flask_app.py

      
      # - name: Log in to Docker Hub
      #   if: success()
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # - name: Build Docker image
      #   if: success()
      #   run: |
      #     docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/emotion_cicd:latest .

      # - name: Push Docker image to Docker Hub
      #   if: success()
      #   run: |
      #     docker push ${{ secrets.DOCKER_HUB_USERNAME }}/emotion_cicd:latest
      
      # - name: Download MLflow Artifacts
      #   env:
      #     DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      #   run: |
      #     python download_artifacts.py
      

      - name: Set DAGSHUB Environment Variables
        run: |
          export MLFLOW_TRACKING_URI=https://dagshub.com/Ubaidmalik9567/mini_project_with_ops.mlflow
          export MLFLOW_TRACKING_USERNAME=${{ secrets.DAGSHUB_USERNAME }}
          export MLFLOW_TRACKING_PASSWORD=${{ secrets.DAGSHUB_PAT }}

      - name: Run Flask app
        if: success()
        run: |
          python app.py

    # dckr_pat_-2GFCra820hJaFf2FJTSQoyV72M ,, docker login -u ubaidmalik1015
    # docker run -p 8000:5000 -e DAGSHUB_PAT=77eb2325e588197f499b992a77be41a6bc3f4abf mini_project_with_ops:self_build
